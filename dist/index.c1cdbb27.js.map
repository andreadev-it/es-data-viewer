{"mappings":"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","sources":["src/es-data/ParsedData.ts","node_modules/@andreadev/canvas-lib/dist/utils.js","node_modules/@andreadev/canvas-lib/dist/modules/pan-zoom-plugin.js","src/es-data/Color.ts","src/es-data/Object.ts","src/es-data/StarSystem.ts","src/es-data/Galaxies.ts","../data-parser/dist/structures.js","../data-parser/dist/parser.js","../data-parser/dist/main.js","src/es-data/Government.ts","src/es-data/Planet.ts","src/es-data/Wormhole.ts","src/src/parse.ts","node_modules/@andreadev/canvas-lib/dist/main.js","src/src/views/galaxy.ts","src/src/setupCanvasLib.ts","src/utils.ts","src/main.ts","src/src/ui.ts"],"sourcesContent":["import { Color } from \"./Color\";\nimport { Galaxy } from \"./Galaxies\";\nimport { Government } from \"./Government\";\nimport { PlanetDetails } from \"./Planet\";\nimport { StarSystem, SystemLink } from \"./StarSystem\";\nimport { WormholeDetails } from \"./Wormhole\";\n\nexport class ParsedData {\n    galaxies: Map<string, Galaxy> = new Map();\n    starSystems: Map<string, StarSystem> = new Map();\n    colors: Map<string, Color> = new Map();\n    sprites: Map<string, File> = new Map();\n    governments: Map<string, Government> = new Map();\n    planets: Map<string, PlanetDetails> = new Map();\n    wormholes: Map<string, WormholeDetails> = new Map();\n    starSystemsLinks: Set<string> = new Set();\n\n    constructor() {}\n\n    addGalaxy(galaxy: Galaxy) {\n        this.galaxies.set(galaxy.name, galaxy);\n    }\n\n    addStarSystem(starSystem: StarSystem) {\n        this.starSystems.set(starSystem.name, starSystem);\n        for (let link of starSystem.links) {\n            let linkedSystem = this.starSystems.get(link);\n            if (linkedSystem) {\n                let linkString = `${starSystem.name}___${linkedSystem.name}`;\n                let reverseLinkString = `${linkedSystem.name}___${starSystem.name}`;\n                if (!this.starSystems.has(reverseLinkString))\n                    this.starSystemsLinks.add(linkString);\n            }\n        }\n    }\n\n    addSprite(path: string, sprite: File) {\n        this.sprites.set(path, sprite);\n    }\n\n    addColor(color: Color) {\n        this.colors.set(color.name, color);\n    }\n\n    addGovernment(gov: Government) {\n        this.governments.set(gov.name, gov);\n    }\n\n    addPlanet(planet: PlanetDetails) {\n        this.planets.set(planet.name, planet);\n    }\n\n    addWormhole(wormhole: WormholeDetails) {\n        this.wormholes.set(wormhole.name, wormhole);\n    }\n}\n","export function throttle(func, wait) {\n    let timeout;\n    let isThrottled = false;\n    return function () {\n        if (isThrottled) {\n            return;\n        }\n        const context = this;\n        const args = arguments;\n        func.apply(context, args);\n        clearTimeout(timeout);\n        timeout = setTimeout(() => (isThrottled = false), wait);\n        isThrottled = true;\n    };\n}\n","import { throttle } from \"../utils\";\nexport class PanZoomPlugin {\n    constructor(app, settings) {\n        var _a, _b, _c;\n        this.app = app;\n        this.settings = settings;\n        this.name = \"PanZoom\";\n        this.currentZoom = 1;\n        this.minZoom = 0.1;\n        this.maxZoom = 10;\n        this.panButton = 1; // Middle\n        this.cameraOffset = { x: 0, y: 0 };\n        this.isPanning = false;\n        this.startedPanningOffset = { x: 0, y: 0 };\n        this.startedPanningPosition = { x: 0, y: 0 };\n        this.throttle = -1;\n        this.bindEvents();\n        this.minZoom = (_a = settings.minZoom) !== null && _a !== void 0 ? _a : this.minZoom;\n        this.maxZoom = (_b = settings.maxZoom) !== null && _b !== void 0 ? _b : this.maxZoom;\n        this.throttle = (_c = settings.throttle) !== null && _c !== void 0 ? _c : this.throttle;\n        this.throttledPaint = throttle(this.app.paint.bind(this.app), this.throttle);\n        let mouseButtons = {\n            'left': 0,\n            'middle': 1,\n            'right': 2,\n            'any': -1\n        };\n        if (settings.panButton)\n            this.panButton = mouseButtons[settings.panButton];\n    }\n    bindEvents() {\n        this.app.on('prerender', this.transformCanvas.bind(this));\n        this.app.canvas.addEventListener('pointerdown', this.onPointerDown.bind(this));\n        this.app.canvas.addEventListener('pointerup', this.onPointerUp.bind(this));\n        this.app.canvas.addEventListener('pointermove', this.onPointerMove.bind(this));\n        this.app.canvas.addEventListener('pointerleave', this.onPointerUp.bind(this));\n        this.app.canvas.addEventListener('wheel', this.onScroll.bind(this));\n    }\n    screenToLocalPoint(x, y) {\n        let hw = this.app.canvas.width / 2;\n        let hh = this.app.canvas.height / 2;\n        let tx = this.cameraOffset.x;\n        let ty = this.cameraOffset.y;\n        let z = this.currentZoom;\n        // center\n        x = x - hw;\n        y = y - hh;\n        // scale\n        x = x / z;\n        y = y / z;\n        // trnaslate\n        x = x - tx;\n        y = y - ty;\n        return { x, y };\n    }\n    zoom(amount) {\n        this.currentZoom += amount;\n        this.currentZoom = Math.min(Math.max(this.minZoom, this.currentZoom), this.maxZoom);\n        this.currentZoom = Math.floor(this.currentZoom * 1000) / 1000;\n        this.updateRender();\n    }\n    transformCanvas(e) {\n        e.detail.context.scale(this.currentZoom, this.currentZoom);\n        e.detail.context.translate(this.cameraOffset.x, this.cameraOffset.y);\n    }\n    onPointerDown(e) {\n        if (e.button == this.panButton || this.panButton == -1) {\n            this.isPanning = true;\n            this.startedPanningOffset = this.cameraOffset;\n            this.startedPanningPosition = { x: e.clientX, y: e.clientY };\n        }\n    }\n    onPointerUp(_) {\n        this.isPanning = false;\n    }\n    onPointerMove(e) {\n        if (this.isPanning) {\n            this.cameraOffset = {\n                x: this.startedPanningOffset.x + ((e.clientX - this.startedPanningPosition.x) / this.currentZoom),\n                y: this.startedPanningOffset.y + ((e.clientY - this.startedPanningPosition.y) / this.currentZoom),\n            };\n            this.updateRender();\n        }\n    }\n    onScroll(e) {\n        this.zoom(e.deltaY / 1000);\n    }\n    updateRender() {\n        if (this.throttle > 0) {\n            this.throttledPaint();\n        }\n        else {\n            this.app.paint();\n        }\n    }\n    static getDataFromMatrix(matrix) {\n        return {\n            scaleX: matrix.a,\n            scaleY: matrix.d,\n            translateX: matrix.e,\n            translateY: matrix.f,\n            skewX: matrix.b,\n            skewY: matrix.c\n        };\n    }\n    static fixedNumber(number, context, direction = 'x') {\n        let { scaleX, scaleY } = this.getDataFromMatrix(context.getTransform());\n        return direction == 'x' ? number * (1 / scaleX) : number * (1 / scaleY);\n    }\n    static fixedSize(width, height, context) {\n        let { scaleX, scaleY } = this.getDataFromMatrix(context.getTransform());\n        return {\n            width: width * (1 / scaleX),\n            height: height * (1 / scaleY)\n        };\n    }\n}\n","import { Line } from \"es-data-parser/dist/structures\";\nimport { ParsedData } from \"./ParsedData\";\n\nexport class Color {\n    constructor(public name: string, public r: number, public g: number, public b: number, public a: number = 255) {}\n\n    toString() {\n        if (this.a == 255) {\n            return `rgb(${this.r}, ${this.g}, ${this.b})`;\n        }\n        return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n    }\n\n    static fromLine(dataLine: Line) {\n        let label = dataLine.tokens[1];\n        let r = parseFloat(dataLine.tokens[2]);\n        let g = parseFloat(dataLine.tokens[3]);\n        let b = parseFloat(dataLine.tokens[4]);\n        let a = 255\n        if (dataLine.tokens.length == 6) {\n            a = parseFloat(dataLine.tokens[5]);\n        }\n\n        return Color.fromPercentages(label, r, g, b, a);\n    }\n\n    static fromPercentages(label: string, r: number, g: number, b: number, a: number) {\n        return new Color(label, r * 255, g * 255, b * 255, a * 255);\n    }\n\n    static fromGovernment(data: ParsedData, govName: string) {\n        let government = data.governments.get(govName);\n        if (!government) {\n            return null;\n        }\n\n        if (government.color instanceof Color) {\n            return government.color;\n        }\n\n        let color = data.colors.get(government.color);\n        if (!color) {\n            return null;\n        }\n\n        return color;\n    }\n}\n","// This class represents different kind of objects\n// that you can find in a star system. \nimport { ParsedData } from \"./ParsedData\";\nimport { Line } from \"es-data-parser/dist/structures\";\n\nexport class SystemObject {\n    name = \"\";\n    sprite = \"\";\n    spriteImage: HTMLImageElement | null = null;\n    distance: number;\n    period: number;\n    offset: number = 0;\n    objects: SystemObject[] = [];\n\n    constructor(private esData: ParsedData, distance: number, period: number, offset = 0) {\n        this.distance = distance;\n        this.period = period;\n    }\n\n    static fromLine(data: ParsedData, dataLine: Line) {\n        if (dataLine.tokens[0] != 'object') {\n            throw new Error(\"Not an object\");\n        }\n\n        const name = (dataLine.tokens.length == 2) ? dataLine.tokens[1] : \"\";\n        let sprite = \"\";\n        let distance = 0;\n        let period = 0;\n        let offset = 0;\n        const objects = [];\n        for (let child of dataLine.children) {\n            switch (child.tokens[0]) {\n                case 'sprite':\n                    sprite = child.tokens[1];\n                    break;\n                case 'distance':\n                    distance = parseFloat(child.tokens[1]);\n                    break;\n                case 'period':\n                    period = parseFloat(child.tokens[1]);\n                    break;\n                case 'offset':\n                    offset = parseFloat(child.tokens[1]);\n                    break;\n                case 'object':\n                    objects.push(SystemObject.fromLine(data, child));\n            }\n        }\n\n        const systemObject = new SystemObject(data, distance, period, offset);\n        systemObject.name = name;\n        systemObject.objects = objects;\n        systemObject.sprite = sprite;\n\n        return systemObject;\n    }\n\n    loadImage(): Promise<void> {\n        if (this.spriteImage) return Promise.resolve();\n        if (this.sprite == '') return Promise.resolve();\n\n        return new Promise((resolve, reject) => {\n            let sprite = this.esData.sprites.get(this.sprite)\n\n            // In case the image file isn't available\n            if (!sprite) {\n                resolve();\n                return;\n            }\n\n            let url = URL.createObjectURL(sprite);\n            let img = new Image();\n\n            img.onload = () => {\n                this.spriteImage = img;\n                resolve();\n            }\n            \n            img.onerror = () => {\n                reject()\n            }\n\n            img.src = url;\n        })\n    }\n}\n","import { Line } from \"es-data-parser/dist/structures\";\nimport { PanZoomPlugin } from \"@andreadev/canvas-lib/dist/modules/pan-zoom-plugin\";\nimport { Drawable, Point, BoundingClientRect } from \"@andreadev/canvas-lib/dist/modules/drawables\";\nimport { ParsedData } from \"./ParsedData\";\nimport { Color } from \"./Color\";\nimport { SystemObject } from \"./Object\";\n\nexport type SystemLink = [Point, Point];\n\nexport const starSystemsMap = new Map<string, StarSystem>();\n\nexport class StarSystem implements Drawable {\n    name: string;\n    position: Point;\n    links: string[] = [];\n    government: string = \"\";\n    esData: ParsedData;\n    attributes: string[] = [];\n    objects: SystemObject[] = [];\n    isSelected = false;\n\n    static fromLine(data: ParsedData, dataLine: Line) {\n        if (dataLine.tokens[0] != 'system') {\n            throw new Error(\"Not a system\");\n        }\n\n        const name = dataLine.tokens[1];\n        let pos: Point = {x:0, y:0};\n        let foundPos = false;\n        let links: string[] = [];\n        let government = \"\";\n        let attributes: string[] = [];\n        const objects: SystemObject[] = [];\n        for (let child of dataLine.children) {\n            switch (child.tokens[0]) {\n                // Extract the position\n                case 'pos':\n                    pos = {\n                        x: parseInt(child.tokens[1]),\n                        y: parseInt(child.tokens[2])\n                    };\n                    foundPos = true;\n                    break;\n                // Extract the links\n                case 'link':\n                    links.push(child.tokens[1]);\n                    break;\n                // Set the system government\n                case 'government':\n                    government = child.tokens[1];\n                    break;\n                // Save a list of attributes\n                case 'attributes':\n                    attributes = child.tokens.slice(1);\n                    break;\n                // Parse the objects in the system\n                case 'object':\n                    objects.push(SystemObject.fromLine(data, child));\n            }\n        }\n\n        if (!foundPos) {\n            throw new Error(\"No position found for this system\");\n        }\n\n        const system = new StarSystem(data, name, pos);\n        system.links = links;\n        system.government = government;\n        system.attributes = attributes;\n        system.objects = objects;\n        \n        starSystemsMap.set(name, system);\n\n        return system;\n    }\n\n    constructor(data: ParsedData, name: string, pos: Point) {\n        this.name = name;\n        this.position = pos;\n        this.esData = data;\n\n        starSystemsMap.set(name, this);\n    }\n\n    getBCR(): BoundingClientRect {\n        return {\n            top: this.position.y - 3,\n            bottom: this.position.y + 3,\n            left: this.position.x - 3,\n            right: this.position.x + 3,\n            width: 6,\n            height: 6\n        };\n    }\n\n    distanceFrom(point: Point): number {\n        let distance = Math.sqrt(\n            Math.pow(this.position.x - point.x, 2) +\n            Math.pow(this.position.y - point.y, 2)\n        );\n\n        return distance;\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        this.renderSelection(ctx);\n        this.renderLinks(ctx);\n        this.renderDot(ctx);\n        this.renderName(ctx);\n    }\n\n    renderSelection(ctx: CanvasRenderingContext2D) {\n        if (!this.isSelected) return;\n\n        ctx.beginPath();\n        ctx.fillStyle = 'rgba(100,100,255,0.2)';\n        ctx.strokeStyle = 'darkblue';\n        ctx.lineWidth = PanZoomPlugin.fixedNumber(1, ctx);\n        let width = PanZoomPlugin.fixedNumber(15, ctx);\n        ctx.ellipse(\n            this.position.x,\n            this.position.y,\n            width,\n            width,\n            0, 0, 2 * Math.PI\n        );\n        ctx.fill();\n        ctx.stroke();\n    }\n\n    renderLinks(ctx: CanvasRenderingContext2D) {\n        // Render the links\n        ctx.lineWidth = PanZoomPlugin.fixedNumber(1, ctx);\n        ctx.strokeStyle = 'rgba(255,255,255,0.2)';\n        for (let link of this.links) {\n            ctx.beginPath();\n            ctx.moveTo(this.position.x, this.position.y);\n\n            const targetSystem = starSystemsMap.get(link);\n            if (!targetSystem)\n                continue;\n\n            ctx.lineTo(targetSystem.position.x, targetSystem.position.y);\n            ctx.stroke();\n        }\n    }\n\n    renderDot(ctx: CanvasRenderingContext2D) {\n        // Render the circle\n        // Get the government color\n        let color = Color.fromGovernment(this.esData, this.government)?.toString();\n        if (!color) {\n            color = '#aaa';\n        }\n\n        ctx.beginPath();\n        ctx.fillStyle = 'black';\n        ctx.strokeStyle = color;\n        ctx.lineWidth = PanZoomPlugin.fixedNumber(2, ctx);\n        let {width, height} = PanZoomPlugin.fixedSize(3, 3, ctx);\n        ctx.ellipse(this.position.x, this.position.y, width, height, 0, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.stroke();\n    }\n\n    renderName(ctx: CanvasRenderingContext2D) {\n        // Render the name\n        let { scaleX: scale } = PanZoomPlugin.getDataFromMatrix(ctx.getTransform());\n        // If it's too small to render the name, interrupt the function\n        if (scale < 0.5) {\n            return;\n        }\n\n        let fontSize = PanZoomPlugin.fixedNumber(12, ctx)\n        ctx.font = `${fontSize}px Arial`;\n        ctx.fillStyle = 'rgba(255,255,255,0.3)';\n        let offset = PanZoomPlugin.fixedNumber(4, ctx);\n        let {width, height} = PanZoomPlugin.fixedSize(3, 3, ctx);\n        ctx.fillText(this.name, this.position.x + width + offset, this.position.y + height);\n    }\n}\n","import { Line } from \"es-data-parser/dist/structures\";\nimport { ParsedData } from \"./ParsedData\";\nimport { Point } from \"@andreadev/canvas-lib/dist/modules/drawables\";\n\nexport class Galaxy {\n    esData: ParsedData;\n\n    name: string;\n    position: Point = {x:0, y:0};\n    sprite = \"\";\n    spriteImage: HTMLImageElement | null = null;\n\n    static fromLine(data: ParsedData, dataLine: Line) {\n        if (dataLine.tokens[0] != 'galaxy') {\n            throw new Error(\"Not a galaxy\");\n        }\n\n        const name = dataLine.tokens[1];\n        let pos: Point = {x:0, y:0};\n        let foundPos = false;\n        let sprite: string = \"\";\n        for (let child of dataLine.children) {\n            if (child.tokens[0] == 'pos') {\n                pos = {\n                    x: parseInt(child.tokens[1]),\n                    y: parseInt(child.tokens[2])\n                };\n                foundPos = true;\n                continue;\n            }\n            \n            if (child.tokens[0] == 'sprite') {\n                sprite = child.tokens[1];\n            }\n        }\n\n        if (!foundPos) {\n            throw new Error(\"No position found for this system\");\n        }\n\n        const galaxy = new Galaxy(data, name, pos);\n        galaxy.sprite = sprite;\n\n        return galaxy;\n    }\n\n    constructor(data: ParsedData, name: string, pos: Point) {\n        this.name = name;\n        this.position = pos;\n        this.esData = data;\n    }\n\n    loadImage(): Promise<void> {\n        if (this.spriteImage) return Promise.resolve();\n        if (this.sprite == '') return Promise.resolve();\n\n        return new Promise((resolve, reject) => {\n            let sprite = this.esData.sprites.get(this.sprite)\n\n            // In case the image file isn't available\n            if (!sprite) {\n                resolve();\n                return;\n            }\n\n            let url = URL.createObjectURL(sprite);\n            let img = new Image();\n\n            img.onload = () => {\n                this.spriteImage = img;\n                resolve();\n            }\n            \n            img.onerror = () => {\n                reject()\n            }\n\n            img.src = url;\n            \n        })\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        // Render the sprite\n        if (this.sprite == '') {\n            return;\n        }\n\n        if (this.spriteImage == null) {\n            console.error(\"Sprite image used before loading!\");\n        }\n        else {\n            ctx.drawImage(\n                this.spriteImage,\n                this.position.x - (this.spriteImage.width / 2),\n                this.position.y - (this.spriteImage.height / 2)\n            );\n        }\n    }\n}\n","export class Line {\n    constructor(tokens, indentation) {\n        this.tokens = tokens;\n        this.indentation = indentation;\n        this.children = [];\n    }\n    toString() {\n        const tokensText = [...this.tokens];\n        let text = \"\";\n        for (const token of tokensText) {\n            if (token.includes(' ')) {\n                if (token.includes('\"')) {\n                    text += \"`\" + token + \"`\";\n                }\n                else {\n                    text += `\"${token}\"`;\n                }\n            }\n            else {\n                text += token + \" \";\n            }\n        }\n        return text;\n    }\n}\nexport class FileRoot extends Line {\n    constructor(tokens, indentation, filename) {\n        super(tokens, indentation);\n        this.tokens = tokens;\n        this.indentation = indentation;\n        this.isRoot = true;\n        this.filename = filename;\n    }\n}\n","import { Line, FileRoot } from \"./structures\";\nexport function parse(data, filename = \"\") {\n    const root = new FileRoot([], 0, filename);\n    let isQuoteOpen = false;\n    let isComment = false;\n    let currentQuote = \"\";\n    let currentLine = new Line([], 0);\n    let currentToken = \"\";\n    let parentLevels = [root];\n    for (let i = 0; i < data.length; i++) {\n        const c = data[i];\n        let nextLine = null;\n        if (isComment && c != '\\n')\n            continue;\n        switch (c) {\n            // handle comments\n            case '#':\n                if (currentToken.length == 0 && !isQuoteOpen) {\n                    isComment = true;\n                }\n                break;\n            // handle quotes\n            case '\"':\n            case '`':\n                if (isQuoteOpen && c == currentQuote) {\n                    isQuoteOpen = false;\n                    if (currentToken.length == 0) {\n                        currentLine.tokens.push('');\n                    }\n                    break;\n                }\n                if (!isQuoteOpen && currentToken.length == 0) {\n                    isQuoteOpen = true;\n                    currentQuote = c;\n                    break;\n                }\n                if (!isQuoteOpen) {\n                    throw new Error(`Unescaped quote in string after ${currentToken}`);\n                }\n                break;\n            // handle newlines\n            case '\\n':\n                if (currentToken != '' && !isComment) {\n                    currentLine.tokens.push(currentToken);\n                }\n                currentToken = '';\n                isComment = false;\n                nextLine = new Line([], 0);\n                // ignore blank lines\n                if (currentLine.tokens.length == 0) {\n                    currentLine = nextLine;\n                    continue;\n                }\n                // handle too much indentation\n                if (currentLine.indentation > parentLevels.length - 1) {\n                    throw new Error(`Unexpected indentation for line ${currentLine.tokens.join(' ')}`);\n                }\n                // adding the line as children to its parent based on indentation\n                if (currentLine.indentation >= 0) {\n                    parentLevels[currentLine.indentation].children.push(currentLine);\n                }\n                // adding new line as parent level for following data\n                if (currentLine.indentation == parentLevels.length - 1) {\n                    parentLevels.push(currentLine);\n                }\n                else {\n                    // if indentation is smaller then the number of parents, it means that\n                    // previous deeper nested parents has ended their block, so we delete them\n                    parentLevels = parentLevels.slice(0, currentLine.indentation + 1);\n                    parentLevels.push(currentLine);\n                }\n                if (isQuoteOpen) {\n                    throw new Error(`A quote was left open near: '${currentToken}'`);\n                }\n                currentLine = nextLine;\n                break;\n            // handle spaces\n            case ' ':\n                if (!isQuoteOpen) {\n                    if (currentToken.length > 0) {\n                        currentLine.tokens.push(currentToken);\n                        currentToken = \"\";\n                    }\n                }\n                else {\n                    currentToken += \" \";\n                }\n                break;\n            // handle tabs\n            case '\\t':\n                if (!isQuoteOpen &&\n                    currentLine.tokens.length == 0 &&\n                    currentToken.length == 0) {\n                    currentLine.indentation++;\n                }\n                else if (!isQuoteOpen && currentToken.length > 0) {\n                    // Add tabs as token separators too to avoid the error in some official files\n                    currentLine.tokens.push(currentToken);\n                    currentToken = \"\";\n                }\n                else {\n                    currentToken += \"\\t\";\n                }\n                break;\n            // handle other characters\n            default:\n                currentToken += c;\n        }\n    }\n    return root;\n}\n","import { parse } from \"./parser\";\nexport function parseFile(file, filename) {\n    return new Promise((resolve, _) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const data = reader.result;\n            resolve(parse(data, filename));\n        };\n        reader.readAsText(file);\n    });\n}\nexport function parseText(data, filename) {\n    return parse(data, filename);\n}\n","import { Line } from \"es-data-parser/dist/structures\";\nimport { Color } from \"./Color\";\nimport { ParsedData } from \"./ParsedData\";\n\nexport class Government {\n    esData: ParsedData;\n\n    name: string;\n    color: string | Color = \"\";\n\n    static fromLine(data: ParsedData, dataLine: Line) {\n        if (dataLine.tokens[0] != 'government') {\n            throw new Error(\"Not a government\");\n        }\n\n        const name = dataLine.tokens[1];\n\n        let color: string | Color = \"\";\n\n        for (let child of dataLine.children) {\n            if (child.tokens[0] == 'color') {\n                if (child.tokens.length == 2) {\n                    color = child.tokens[1];\n                }\n                else {\n                    let r = parseFloat(dataLine.tokens[1]);\n                    let g = parseFloat(dataLine.tokens[2]);\n                    let b = parseFloat(dataLine.tokens[3]);\n                    let a = 255\n                    if (dataLine.tokens.length == 5) {\n                        a = parseFloat(dataLine.tokens[4]);\n                    }\n                    color = Color.fromPercentages('', r, g, b, a);\n                }\n            }\n        }\n\n        const government = new Government(data, name);\n        government.color = color;\n\n        return government;\n    }\n\n    constructor(data: ParsedData, name: string) {\n        this.esData = data;\n        this.name = name;\n    }\n}\n","import { ParsedData } from \"./ParsedData\";\nimport { Line } from \"es-data-parser/dist/structures\";\nimport { WormholeDetails } from \"./Wormhole\";\n\nexport class PlanetDetails {\n    wormhole: string = \"\";\n\n    constructor(private esData: ParsedData, public name: string) {}\n\n    static fromLine(data: ParsedData, dataLine: Line) {\n        if (dataLine.tokens[0] != 'planet') {\n            throw new Error(\"Not a planet\");\n        }\n\n        const name = dataLine.tokens[1];\n\n        let wormhole: string = \"\";\n        for (let child of dataLine.children) {\n            if (child.tokens[0] == 'wormhole') {\n                wormhole = child.tokens[1];\n            }\n        }\n\n        let planet = new PlanetDetails(data, name);\n        planet.wormhole = wormhole;\n\n        return planet;\n    }\n}\n","import { Color } from \"./Color\";\nimport { ParsedData } from \"./ParsedData\";\nimport { Line } from \"es-data-parser/dist/structures\";\n\nexport class WormholeDetails {\n    isMappable = false;\n    links: [string, string][] = [];\n    color: Color | string = \"\";\n\n    constructor(private esData: ParsedData, public name: string) {}\n\n    static fromLine(data: ParsedData, dataLine: Line) {\n        if (dataLine.tokens[0] != 'wormhole') {\n            throw new Error(\"Not a wormhole\");\n        }\n\n        const name = dataLine.tokens[1];\n\n        let mappable = false;\n        let color: Color | string = \"\";\n        let links: [string, string][] = [];\n\n        for (let child of dataLine.children) {\n            switch (child.tokens[0]) {\n                case 'color':\n                    if (child.tokens.length == 2) {\n                        color = child.tokens[1];\n                    }\n                    else {\n                        let r = parseFloat(dataLine.tokens[1]);\n                        let g = parseFloat(dataLine.tokens[2]);\n                        let b = parseFloat(dataLine.tokens[3]);\n                        let a = 255\n                        if (dataLine.tokens.length == 5) {\n                            a = parseFloat(dataLine.tokens[4]);\n                        }\n                        color = Color.fromPercentages('', r, g, b, a);\n                    }\n                    break;\n\n                case 'link':\n                    links.push(\n                        [ child.tokens[1], child.tokens[2] ]\n                    );\n                    break;\n                case 'mappable':\n                    mappable = true;\n                    break;\n            }\n        }\n\n        const wormhole = new WormholeDetails(data, name);\n        wormhole.isMappable = mappable;\n        wormhole.color = color;\n        wormhole.links = links;\n\n        return wormhole;\n    }\n}\n","import { ParsedData } from \"../es-data/ParsedData\";\nimport { StarSystem } from \"../es-data/StarSystem\";\nimport { Galaxy } from \"../es-data/Galaxies\";\nimport { FileRoot } from \"es-data-parser/dist/structures\";\nimport { parseFile } from \"es-data-parser\";\nimport { Color } from \"../es-data/Color\";\nimport { Government } from \"../es-data/Government\";\nimport { PlanetDetails } from \"../es-data/Planet\";\nimport { WormholeDetails } from \"../es-data/Wormhole\";\n\n\nexport async function parse(files: File[]) {\n    const parsedData = new ParsedData();\n    const roots: FileRoot[] = [];\n\n    for (let file of files) {\n        if (\n            file.webkitRelativePath.match(/^([^\\/]+\\/)?data\\//) !== null) {\n            let fileroot = await parseFile(file, file.webkitRelativePath);\n\n            roots.push(fileroot);\n\n            for (let child of fileroot.children) {\n                if (child.tokens[0] == 'system') {\n                    parsedData.addStarSystem(StarSystem.fromLine(parsedData, child));\n                }\n                else if (child.tokens[0] == 'galaxy') {\n                    const galaxy = Galaxy.fromLine(parsedData, child)\n                    await galaxy.loadImage();\n                    parsedData.addGalaxy(galaxy);\n                }\n                else if (child.tokens[0] == 'color') {\n                    parsedData.addColor(Color.fromLine(child));\n                }\n                else if (child.tokens[0] == 'government') {\n                    parsedData.addGovernment(Government.fromLine(parsedData, child));\n                }\n                else if (child.tokens[0] == 'planet') {\n                    parsedData.addPlanet(PlanetDetails.fromLine(parsedData, child));\n                }\n                else if (child.tokens[0] == 'wormhole') {\n                    parsedData.addWormhole(WormholeDetails.fromLine(parsedData, child));\n                }\n            }\n        }\n        else if (file.webkitRelativePath.includes('/images/')) {\n            let relativePath = file.webkitRelativePath.split('/images/')[1];\n\n            // remove extension (i.e. .png) from relative path\n            relativePath = relativePath.split('.')[0];\n\n            if (\n                relativePath.at(-1) == '+' ||\n                relativePath.at(-1) == '~' ||\n                relativePath.at(-1) == '-'\n            ) {\n                relativePath = relativePath.slice(0, -1);\n            }\n\n            if (!relativePath) continue;\n\n            parsedData.addSprite(relativePath, file);\n        }\n    }\n\n    console.log(parsedData);\n    return parsedData;\n}\n","export class CanvasLib extends EventTarget {\n    constructor(canvas) {\n        super();\n        this.canvas = canvas;\n        this.plugins = new Map();\n        const ctx = this.canvas.getContext(\"2d\");\n        if (ctx == null) {\n            throw ('Could not get the context for the canvas');\n        }\n        this.context = ctx;\n    }\n    renderCycle() {\n        this.paint();\n        window.requestAnimationFrame(() => this.renderCycle());\n    }\n    use(PluginClass, settings) {\n        const plugin = new PluginClass(this, settings);\n        this.plugins.set(plugin.name, plugin);\n    }\n    getPlugin(PluginClass) {\n        for (let plugin of this.plugins.values()) {\n            if (plugin instanceof PluginClass) {\n                return plugin;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Main paint function for the canvas\n     *\n     * @param shouldClear If true, clear the canvas before painting\n     */\n    paint(shouldClear = true) {\n        this.prepareContext(shouldClear);\n        const prop = { context: this.context };\n        this.preRender(prop);\n        this.render(prop);\n        this.postRender(prop);\n    }\n    prepareContext(shouldClear = true) {\n        this.context.resetTransform();\n        if (shouldClear) {\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n        this.context.translate(Math.floor(this.canvas.width / 2), Math.floor(this.canvas.height / 2));\n    }\n    /**\n     * Just a utility function to make the user code less heavy\n     */\n    on(event, callback) {\n        this.addEventListener(event, callback);\n    }\n    startRendering() {\n        window.requestAnimationFrame(() => this.renderCycle());\n    }\n    preRender(eventProp) {\n        const e = new CustomEvent('prerender', { detail: eventProp });\n        this.dispatchEvent(e);\n    }\n    render(eventProp) {\n        const e = new CustomEvent('render', { detail: eventProp });\n        this.dispatchEvent(e);\n    }\n    postRender(eventProp) {\n        const e = new CustomEvent('postrender', { detail: eventProp });\n        this.dispatchEvent(e);\n    }\n}\n","import { ParsedData } from \"../../es-data/ParsedData\";\nimport { PanZoomPlugin } from \"@andreadev/canvas-lib/dist/modules/pan-zoom-plugin\";\nimport { View } from \"./abstract\";\nimport { CanvasLib } from \"@andreadev/canvas-lib\";\nimport { StarSystem } from \"../../es-data/StarSystem\";\n\n\nexport class GalaxyView extends EventTarget implements View {\n\n    shouldRenderNames = true;\n    shouldRenderLinks = true;\n    shouldRenderDots  = true;\n    shouldRenderGalaxies = true;\n    shouldRenderWormholeLinks = true;\n    shouldRenderHiddenWormholes = false;\n    currentlySelected: StarSystem | null = null;\n\n    constructor(private esData: ParsedData, private canvasLib: CanvasLib) { \n        super();\n\n        this.canvasLib.canvas.addEventListener('pointerdown', this.onCanvasClick.bind(this));\n    }\n\n    activate() {\n        document.getElementById('toggle-galaxies')?.addEventListener('change', this.toggleGalaxies.bind(this))\n        document.getElementById('toggle-pins')?.addEventListener('change', this.toggleDots.bind(this))\n        document.getElementById('toggle-names')?.addEventListener('change', this.toggleNames.bind(this))\n        document.getElementById('toggle-links')?.addEventListener('change', this.toggleLinks.bind(this))\n        document.getElementById('toggle-wormholes')?.addEventListener('change', this.toggleWormholes.bind(this))\n        document.getElementById('toggle-hidden-wormholes')?.addEventListener('change', this.toggleHiddenWormholes.bind(this))\n    }\n\n    deactivate() {\n        // Removing event listeners will not work because of \"bind\"\n        // document.getElementById('toggle-galaxies')?.removeEventListener('change', this.toggleGalaxies)\n        // document.getElementById('toggle-pins')?.addEventListener('change', this.toggleDots)\n        // document.getElementById('toggle-names')?.addEventListener('change', this.toggleNames)\n        // document.getElementById('toggle-links')?.addEventListener('change', this.toggleLinks)\n    }\n\n    toggleNames(e: Event) {\n        this.shouldRenderNames = (<HTMLInputElement>e.target).checked; \n        this.canvasLib.paint();\n    }\n    toggleLinks(e: Event) {\n        this.shouldRenderLinks = (<HTMLInputElement>e.target).checked; \n        this.canvasLib.paint();\n    }\n    toggleDots(e: Event) {\n        this.shouldRenderDots = (<HTMLInputElement>e.target).checked; \n        this.canvasLib.paint();\n    }\n    toggleGalaxies(e: Event) {\n        this.shouldRenderGalaxies = (<HTMLInputElement>e.target).checked; \n        this.canvasLib.paint();\n    }\n    toggleWormholes(e: Event) {\n        this.shouldRenderWormholeLinks = (<HTMLInputElement>e.target).checked; \n        this.canvasLib.paint();\n    }\n    toggleHiddenWormholes(e: Event) {\n        this.shouldRenderHiddenWormholes = (<HTMLInputElement>e.target).checked; \n        this.canvasLib.paint();\n    }\n\n    onCanvasClick(e: PointerEvent) {\n        if (e.button !== 0) return;\n\n        let panZoomPlugin = this.canvasLib.getPlugin(PanZoomPlugin);\n        if (!panZoomPlugin) return;\n\n        let point = panZoomPlugin.screenToLocalPoint(e.clientX, e.clientY);\n\n        let closest: StarSystem | null = null;\n        let closestDistance = 10000; // High number\n        let minimumDistance = 10;\n        let ctx = this.canvasLib.canvas.getContext('2d');\n        if (ctx) {\n            minimumDistance = PanZoomPlugin.fixedNumber(10, ctx);\n        }\n\n        for (let system of this.esData.starSystems.values()) {\n            let d = system.distanceFrom(point);\n            if (d > minimumDistance) continue;\n\n            if (!closest || d < closestDistance) {\n                closest = system;\n                closestDistance = d;\n            }\n        }\n\n        if (!closest) {\n            this.removeSelection();\n            return;\n        }\n\n        this.selectSystem(closest);\n    }\n\n    removeSelection() {\n        if (!this.currentlySelected) return;\n\n        this.currentlySelected.isSelected = false;\n        this.currentlySelected = null;\n\n        this.canvasLib.paint();\n    }\n\n    selectSystem(system: StarSystem) {\n\n        if (this.currentlySelected)\n            this.currentlySelected.isSelected = false;\n\n        this.currentlySelected = system;\n        system.isSelected = true;\n        this.updateStarSystemInfo(system);\n        \n        this.canvasLib.paint();\n    }\n\n    updateStarSystemInfo(system: StarSystem) {\n        document.querySelector('#system-name .value')!.textContent = system.name;\n        document.querySelector('#system-position .value')!.textContent = `${system.position.x} - ${system.position.y}`;\n        document.querySelector('#system-government .value')!.textContent = system.government;\n        document.querySelector('#system-attributes .value')!.textContent = system.attributes.join(', ');\n    }\n\n    preRender(ctx: CanvasRenderingContext2D) {\n        if (!this.esData) return;\n\n        // Draw all galaxies\n        if (this.shouldRenderGalaxies) {\n            for (let galaxy of this.esData.galaxies.values()) {\n                galaxy.render(ctx);\n            }\n        }\n\n        if (this.shouldRenderLinks) {\n            // Draw all links\n            ctx.lineWidth = PanZoomPlugin.fixedNumber(1, ctx);\n            ctx.strokeStyle = 'rgba(255,255,255,0.2)';\n            for (let link of this.esData.starSystemsLinks.values()) {\n                let [originName, targetName] = link.split('___');\n\n                let origin = this.esData.starSystems.get(originName);\n                let target = this.esData.starSystems.get(targetName);\n\n                if (!target || !origin)\n                    continue;\n\n                ctx.beginPath();\n                ctx.moveTo(origin.position.x, origin.position.y);\n\n                ctx.lineTo(target.position.x, target.position.y);\n                ctx.stroke();\n            }\n        }\n\n        if (this.shouldRenderWormholeLinks) {\n            // Draw all links\n            ctx.lineWidth = PanZoomPlugin.fixedNumber(1, ctx);\n            ctx.strokeStyle = 'rgba(100,100,255,0.5)';\n            for (let wormhole of this.esData.wormholes.values()) {\n                if (!wormhole.isMappable && !this.shouldRenderHiddenWormholes) continue;\n\n                for (let link of wormhole.links) {\n                    let [originName, targetName] = link;\n\n                    let origin = this.esData.starSystems.get(originName);\n                    let target = this.esData.starSystems.get(targetName);\n\n                    if (!target || !origin)\n                        continue;\n\n                    ctx.beginPath();\n                    ctx.moveTo(origin.position.x, origin.position.y);\n\n                    ctx.lineTo(target.position.x, target.position.y);\n                    ctx.stroke();\n                }\n            }\n        }\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n        if (!this.esData) return;\n\n        // Draw all systems\n        for (let system of this.esData.starSystems.values()) {\n            system.renderSelection(ctx);\n\n            if (this.shouldRenderDots) {\n                system.renderDot(ctx);\n            }\n            if (this.shouldRenderNames) {\n                system.renderName(ctx);\n            }\n        }\n    }\n\n    postRender(ctx: CanvasRenderingContext2D) {\n\n    }\n}\n","import { CanvasLib } from \"@andreadev/canvas-lib\";\nimport { PanZoomPlugin } from \"@andreadev/canvas-lib/dist/modules/pan-zoom-plugin\";\nimport { ParsedData } from \"../es-data/ParsedData\";\nimport { View } from \"./views/abstract\";\nimport { GalaxyView } from \"./views/galaxy\";\nimport { RenderingEvent } from \"@andreadev/canvas-lib/dist/main\";\n\nconst views: Record<string, View | null>= {\n    galaxy: null\n};\nlet currentView: View | null = null;\n\nexport function initCanvasLib(canvas: HTMLCanvasElement) {\n    // Fix canvas dimensions\n    let canvasBCR = canvas.getBoundingClientRect();\n    canvas.width = canvasBCR.width;\n    canvas.height = canvasBCR.height;\n\n    const canvasLib = new CanvasLib(canvas);\n    canvasLib.use(PanZoomPlugin, {});\n\n    // Setup rendering functions for the view\n    const preRender = (event: RenderingEvent) => {\n        currentView?.preRender(event.detail.context);\n    }\n    const render = async (event: RenderingEvent) => {\n        currentView?.render(event.detail.context);\n    }\n    const postRender = async (event: RenderingEvent) => {\n        currentView?.render(event.detail.context);\n    }\n\n    canvasLib.on('prerender', preRender);\n    canvasLib.on('render', render);\n    canvasLib.on('postrender', postRender);\n\n    return canvasLib;\n}\n\nexport function setCurrentView(view: View) {\n    currentView?.deactivate();\n    currentView = view;\n    currentView.activate();\n}\n\nexport function filesLoaded(lib: CanvasLib, data: ParsedData) {\n    views.galaxy = new GalaxyView(data, lib);\n    setCurrentView(views.galaxy);\n\n    lib.paint();\n}\n","export const openDirectory = async (): Promise<File[]> => {\n    // Use older apis because File System Access API seems to be working unnaturally\n    return new Promise((resolve) => {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.webkitdirectory = true;\n        \n        input.addEventListener('change', () => {\n            let files = Array.from(input.files as FileList);\n            resolve(files);\n        });\n        if ('showPicker' in HTMLInputElement.prototype) {\n            input.showPicker();\n        } else {\n            input.click();\n        }\n    });\n};\n\n// Probabilmente è qualcosa che andrebbe piuttosto impostato nella libreria CanvasLib.\nexport const throttle = (fn: Function, wait: number = 300) => {\n    let inThrottle: boolean;\n    let lastFn: ReturnType<typeof setTimeout>;\n    let lastTime: number;\n\n    return function (this: any) {\n        const context = this,\n        args = arguments;\n        if (!inThrottle) {\n            fn.apply(context, args);\n            lastTime = Date.now();\n            inThrottle = true;\n        } else {\n            clearTimeout(lastFn);\n            lastFn = setTimeout(() => {\n                if (Date.now() - lastTime >= wait) {\n                    fn.apply(context, args);\n                    lastTime = Date.now();\n                }\n            }, Math.max(wait - (Date.now() - lastTime), 0));\n        }\n    };\n};\n\n","import { parse } from './src/parse';\nimport { filesLoaded, initCanvasLib } from './src/setupCanvasLib';\nimport { openDirectory } from './utils';\nimport { CanvasLib } from '@andreadev/canvas-lib';\nimport { bindUI } from './src/ui';\n\nlet lib: CanvasLib | null = null;\n\nasync function initApp() {\n    const filesInfo = await openDirectory();\n\n    const data = await parse(filesInfo);\n\n    let canvas = document.getElementById('viewer') as HTMLCanvasElement;\n\n    lib = initCanvasLib(canvas);\n    \n    filesLoaded(lib, data);\n\n    bindUI(lib);\n};\n\n// Bind open project button\ndocument.getElementById('select-file')?.addEventListener('click', () => {\n    initApp();\n});\n","import { CanvasLib } from \"@andreadev/canvas-lib\";\nimport { PanZoomPlugin } from \"@andreadev/canvas-lib/dist/modules/pan-zoom-plugin\";\n\n\nexport function bindUI(lib: CanvasLib) {\n    // Setup event listeners for the UI\n    document.getElementById('zoom-in')?.addEventListener('click', () => {\n        const panZoomPlugin = lib.getPlugin(PanZoomPlugin);\n\n        if (!panZoomPlugin) return;\n\n        panZoomPlugin.zoom(0.2);\n    });\n\n    document.getElementById('zoom-out')?.addEventListener('click', () => {\n        const panZoomPlugin = lib.getPlugin(PanZoomPlugin);\n\n        if (!panZoomPlugin) return;\n\n        panZoomPlugin.zoom(-0.2);\n    });\n\n    document.getElementById('viewer')?.addEventListener('pointerdown', (e) => {\n        const panZoomPlugin = lib.getPlugin(PanZoomPlugin);\n\n        if (!panZoomPlugin) return;\n\n        console.log(panZoomPlugin.screenToLocalPoint(e.clientX, e.clientY));\n    })\n}\n"],"names":["$f1123154cef67b66$export$aa361464e3df6895","galaxies","Map","starSystems","colors","sprites","governments","planets","wormholes","starSystemsLinks","Set","constructor","addGalaxy","galaxy","this","set","name","addStarSystem","starSystem","link","links","linkedSystem","get","linkString","reverseLinkString","has","add","addSprite","path","sprite","addColor","color","addGovernment","gov","addPlanet","planet","addWormhole","wormhole","$cd2915ddbfd8b047$export$de363e709c412c8a","func","wait","timeout","isThrottled","args","arguments","apply","clearTimeout","setTimeout","$f7e9087d61420905$export$4d5de249200f86f7","app","settings","_a","_b","_c","currentZoom","minZoom","maxZoom","panButton","cameraOffset","x","y","isPanning","startedPanningOffset","startedPanningPosition","throttle","bindEvents","throttledPaint","paint","bind","left","middle","right","any","on","transformCanvas","canvas","addEventListener","onPointerDown","onPointerUp","onPointerMove","onScroll","screenToLocalPoint","hw","width","hh","height","tx","ty","z","zoom","amount","Math","min","max","floor","updateRender","e","detail","context","scale","translate","button","clientX","clientY","_","deltaY","static","matrix","scaleX","a","scaleY","d","translateX","translateY","f","skewX","b","skewY","c","number","direction","getDataFromMatrix","getTransform","$f1f0f5c6d9eed29b$export$892596cec99bc70e","r","g","toString","dataLine","label","tokens","parseFloat","length","fromPercentages","data","govName","government","$4f8e289126f413e4$export$60567d376fdb67d","esData","distance","period","offset","spriteImage","objects","Error","child","children","push","fromLine","systemObject","loadImage","Promise","resolve","reject","url","URL","createObjectURL","img","Image","onload","onerror","src","$c5ca37d8b9da03d5$export$ea149fec8837f72b","$c5ca37d8b9da03d5$export$804913e4ec6e385f","attributes","isSelected","pos","foundPos","parseInt","slice","system","position","getBCR","top","bottom","distanceFrom","point","sqrt","pow","render","ctx","renderSelection","renderLinks","renderDot","renderName","beginPath","fillStyle","strokeStyle","lineWidth","fixedNumber","ellipse","PI","fill","stroke","moveTo","targetSystem","lineTo","fromGovernment","fixedSize","fontSize","font","fillText","$b494b04b16341b2a$export$6509ed3b9b17fe1b","console","error","drawImage","$97a2f824b02b75ca$export$17d680238e50603e","indentation","tokensText","text","token","includes","$97a2f824b02b75ca$export$bd97b5a17cbaafd5","filename","super","isRoot","$acc3472be033e1d0$export$98e6a39c04603d36","root","isQuoteOpen","isComment","currentQuote","currentLine","currentToken","parentLevels","i","nextLine","join","$ea7d98d7be25fca1$export$f1c553d4f1a2351","file","reader","FileReader","result","readAsText","$ab59d5a7cd9e0c18$export$fb8111228a5af09a","$e3285f5c456ba44e$export$fc59f9442c61c779","$ff614e6edfa5dcd3$export$124803d07e39421a","isMappable","mappable","async","$59e043c0f225063d$export$98e6a39c04603d36","files","parsedData","roots","webkitRelativePath","match","fileroot","relativePath","split","at","log","$0f55f752fe3cfaec$export$17e8e0f5ce5db525","EventTarget","plugins","getContext","renderCycle","window","requestAnimationFrame","use","PluginClass","plugin","getPlugin","values","shouldClear","prepareContext","prop","preRender","postRender","resetTransform","clearRect","event","callback","startRendering","eventProp","CustomEvent","dispatchEvent","$7a23650d329d929d$export$bbb64adae9205aa7","canvasLib","shouldRenderNames","shouldRenderLinks","shouldRenderDots","shouldRenderGalaxies","shouldRenderWormholeLinks","shouldRenderHiddenWormholes","currentlySelected","onCanvasClick","activate","document","getElementById","toggleGalaxies","toggleDots","toggleNames","toggleLinks","toggleWormholes","toggleHiddenWormholes","deactivate","target","checked","panZoomPlugin","closest","closestDistance","minimumDistance","selectSystem","removeSelection","updateStarSystemInfo","querySelector","textContent","originName","targetName","origin","$b788cc96538733ff$var$views","$b788cc96538733ff$var$currentView","$b788cc96538733ff$export$78cda6c44323997e","canvasBCR","getBoundingClientRect","$b788cc96538733ff$export$c64188370d7959c6","lib","view","$df5bef30413a053b$export$942f0b26f9f32b84","input","createElement","type","webkitdirectory","Array","from","HTMLInputElement","prototype","showPicker","click","$ad2bcec7a0192558$var$lib","$ad2bcec7a0192558$var$initApp","filesInfo"],"version":3,"file":"index.c1cdbb27.js.map"}